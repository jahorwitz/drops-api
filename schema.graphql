# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Activity {
  id: ID!
  name: String
  amount: Int
  unitOfMeasure: String
  startTime: DateTime
  endTime: DateTime
  user: User
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ActivityWhereUniqueInput {
  id: ID
}

input ActivityWhereInput {
  AND: [ActivityWhereInput!]
  OR: [ActivityWhereInput!]
  NOT: [ActivityWhereInput!]
  id: IDFilter
  name: StringFilter
  amount: IntNullableFilter
  unitOfMeasure: StringFilter
  startTime: DateTimeFilter
  endTime: DateTimeNullableFilter
  user: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ActivityOrderByInput {
  id: OrderDirection
  name: OrderDirection
  amount: OrderDirection
  unitOfMeasure: OrderDirection
  startTime: OrderDirection
  endTime: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input ActivityUpdateInput {
  name: String
  amount: Int
  unitOfMeasure: String
  startTime: DateTime
  endTime: DateTime
  user: UserRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ActivityUpdateArgs {
  where: ActivityWhereUniqueInput!
  data: ActivityUpdateInput!
}

input ActivityCreateInput {
  name: String
  amount: Int
  unitOfMeasure: String
  startTime: DateTime
  endTime: DateTime
  user: UserRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Goal {
  id: ID!
  type: GoalTypeType
  name: String
  amount: Int
  unitOfMeasure: String
  daysOfWeek: [GoalDaysOfWeekType!]
  user: User
}

enum GoalTypeType {
  Exercise
  Diet
}

enum GoalDaysOfWeekType {
  Sunday
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
}

input GoalWhereUniqueInput {
  id: ID
}

input GoalWhereInput {
  AND: [GoalWhereInput!]
  OR: [GoalWhereInput!]
  NOT: [GoalWhereInput!]
  id: IDFilter
  type: GoalTypeTypeNullableFilter
  name: StringFilter
  amount: IntFilter
  unitOfMeasure: StringFilter
  user: UserWhereInput
}

input GoalTypeTypeNullableFilter {
  equals: GoalTypeType
  in: [GoalTypeType!]
  notIn: [GoalTypeType!]
  not: GoalTypeTypeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input GoalOrderByInput {
  id: OrderDirection
  type: OrderDirection
  name: OrderDirection
  amount: OrderDirection
  unitOfMeasure: OrderDirection
}

input GoalUpdateInput {
  type: GoalTypeType
  name: String
  amount: Int
  unitOfMeasure: String
  daysOfWeek: [GoalDaysOfWeekType!]
  user: UserRelateToOneForUpdateInput
}

input GoalUpdateArgs {
  where: GoalWhereUniqueInput!
  data: GoalUpdateInput!
}

input GoalCreateInput {
  type: GoalTypeType
  name: String
  amount: Int
  unitOfMeasure: String
  daysOfWeek: [GoalDaysOfWeekType!]
  user: UserRelateToOneForCreateInput
}

type Medication {
  id: ID!
  name: String
  amount: Int
  unitOfMeasure: String
  time: String
  user: User
  status: Boolean
}

input MedicationWhereUniqueInput {
  id: ID
}

input MedicationWhereInput {
  AND: [MedicationWhereInput!]
  OR: [MedicationWhereInput!]
  NOT: [MedicationWhereInput!]
  id: IDFilter
  name: StringFilter
  amount: IntFilter
  unitOfMeasure: StringFilter
  time: StringFilter
  user: UserWhereInput
  status: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input MedicationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  amount: OrderDirection
  unitOfMeasure: OrderDirection
  time: OrderDirection
  status: OrderDirection
}

input MedicationUpdateInput {
  name: String
  amount: Int
  unitOfMeasure: String
  time: String
  user: UserRelateToOneForUpdateInput
  status: Boolean
}

input MedicationUpdateArgs {
  where: MedicationWhereUniqueInput!
  data: MedicationUpdateInput!
}

input MedicationCreateInput {
  name: String
  amount: Int
  unitOfMeasure: String
  time: String
  user: UserRelateToOneForCreateInput
  status: Boolean
}

type Notification {
  id: ID!
  type: NotificationTypeType
  description: String
  notificationTime: DateTime
  createdAt: DateTime
  status: String
  archivedAt: DateTime
  user: User
}

enum NotificationTypeType {
  Activity
  Diet
  Glucose
  Medicaton
  other
}

input NotificationWhereUniqueInput {
  id: ID
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  type: NotificationTypeTypeNullableFilter
  description: StringFilter
  notificationTime: DateTimeFilter
  createdAt: DateTimeNullableFilter
  status: StringNullableFilter
  archivedAt: DateTimeNullableFilter
  user: UserWhereInput
}

input NotificationTypeTypeNullableFilter {
  equals: NotificationTypeType
  in: [NotificationTypeType!]
  notIn: [NotificationTypeType!]
  not: NotificationTypeTypeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input NotificationOrderByInput {
  id: OrderDirection
  type: OrderDirection
  description: OrderDirection
  notificationTime: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
  archivedAt: OrderDirection
}

input NotificationUpdateInput {
  type: NotificationTypeType
  description: String
  notificationTime: DateTime
  createdAt: DateTime
  status: String
  archivedAt: DateTime
  user: UserRelateToOneForUpdateInput
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  type: NotificationTypeType
  description: String
  notificationTime: DateTime
  createdAt: DateTime
  status: String
  archivedAt: DateTime
  user: UserRelateToOneForCreateInput
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  createdAt: DateTime
  lastLoginDate: DateTime
  dateOfBirth: DateTime
  weight: Int
  height: Int
  sex: String
  diabetesType: [UserDiabetesTypeType!]
  isRegistrationComplete: Boolean
  isOnboardingComplete: Boolean
  goals(
    where: GoalWhereInput! = {}
    orderBy: [GoalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: GoalWhereUniqueInput
  ): [Goal!]
  goalsCount(where: GoalWhereInput! = {}): Int
  notifications(
    where: NotificationWhereInput! = {}
    orderBy: [NotificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: NotificationWhereUniqueInput
  ): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  activities(
    where: ActivityWhereInput! = {}
    orderBy: [ActivityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ActivityWhereUniqueInput
  ): [Activity!]
  activitiesCount(where: ActivityWhereInput! = {}): Int
  medications(
    where: MedicationWhereInput! = {}
    orderBy: [MedicationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: MedicationWhereUniqueInput
  ): [Medication!]
  medicationsCount(where: MedicationWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

enum UserDiabetesTypeType {
  type1
  type2
  gestational
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  createdAt: DateTimeNullableFilter
  lastLoginDate: DateTimeNullableFilter
  dateOfBirth: DateTimeNullableFilter
  weight: IntNullableFilter
  height: IntNullableFilter
  sex: StringNullableFilter
  isRegistrationComplete: BooleanFilter
  isOnboardingComplete: BooleanFilter
  goals: GoalManyRelationFilter
  notifications: NotificationManyRelationFilter
  activities: ActivityManyRelationFilter
  medications: MedicationManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input GoalManyRelationFilter {
  every: GoalWhereInput
  some: GoalWhereInput
  none: GoalWhereInput
}

input NotificationManyRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

input ActivityManyRelationFilter {
  every: ActivityWhereInput
  some: ActivityWhereInput
  none: ActivityWhereInput
}

input MedicationManyRelationFilter {
  every: MedicationWhereInput
  some: MedicationWhereInput
  none: MedicationWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
  lastLoginDate: OrderDirection
  dateOfBirth: OrderDirection
  weight: OrderDirection
  height: OrderDirection
  sex: OrderDirection
  isRegistrationComplete: OrderDirection
  isOnboardingComplete: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  lastLoginDate: DateTime
  dateOfBirth: DateTime
  weight: Int
  height: Int
  sex: String
  diabetesType: [UserDiabetesTypeType!]
  isRegistrationComplete: Boolean
  isOnboardingComplete: Boolean
  goals: GoalRelateToManyForUpdateInput
  notifications: NotificationRelateToManyForUpdateInput
  activities: ActivityRelateToManyForUpdateInput
  medications: MedicationRelateToManyForUpdateInput
}

input GoalRelateToManyForUpdateInput {
  disconnect: [GoalWhereUniqueInput!]
  set: [GoalWhereUniqueInput!]
  create: [GoalCreateInput!]
  connect: [GoalWhereUniqueInput!]
}

input NotificationRelateToManyForUpdateInput {
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input ActivityRelateToManyForUpdateInput {
  disconnect: [ActivityWhereUniqueInput!]
  set: [ActivityWhereUniqueInput!]
  create: [ActivityCreateInput!]
  connect: [ActivityWhereUniqueInput!]
}

input MedicationRelateToManyForUpdateInput {
  disconnect: [MedicationWhereUniqueInput!]
  set: [MedicationWhereUniqueInput!]
  create: [MedicationCreateInput!]
  connect: [MedicationWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  createdAt: DateTime
  lastLoginDate: DateTime
  dateOfBirth: DateTime
  weight: Int
  height: Int
  sex: String
  diabetesType: [UserDiabetesTypeType!]
  isRegistrationComplete: Boolean
  isOnboardingComplete: Boolean
  goals: GoalRelateToManyForCreateInput
  notifications: NotificationRelateToManyForCreateInput
  activities: ActivityRelateToManyForCreateInput
  medications: MedicationRelateToManyForCreateInput
}

input GoalRelateToManyForCreateInput {
  create: [GoalCreateInput!]
  connect: [GoalWhereUniqueInput!]
}

input NotificationRelateToManyForCreateInput {
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input ActivityRelateToManyForCreateInput {
  create: [ActivityCreateInput!]
  connect: [ActivityWhereUniqueInput!]
}

input MedicationRelateToManyForCreateInput {
  create: [MedicationCreateInput!]
  connect: [MedicationWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createActivity(data: ActivityCreateInput!): Activity
  createActivities(data: [ActivityCreateInput!]!): [Activity]
  updateActivity(
    where: ActivityWhereUniqueInput!
    data: ActivityUpdateInput!
  ): Activity
  updateActivities(data: [ActivityUpdateArgs!]!): [Activity]
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteActivities(where: [ActivityWhereUniqueInput!]!): [Activity]
  createGoal(data: GoalCreateInput!): Goal
  createGoals(data: [GoalCreateInput!]!): [Goal]
  updateGoal(where: GoalWhereUniqueInput!, data: GoalUpdateInput!): Goal
  updateGoals(data: [GoalUpdateArgs!]!): [Goal]
  deleteGoal(where: GoalWhereUniqueInput!): Goal
  deleteGoals(where: [GoalWhereUniqueInput!]!): [Goal]
  createMedication(data: MedicationCreateInput!): Medication
  createMedications(data: [MedicationCreateInput!]!): [Medication]
  updateMedication(
    where: MedicationWhereUniqueInput!
    data: MedicationUpdateInput!
  ): Medication
  updateMedications(data: [MedicationUpdateArgs!]!): [Medication]
  deleteMedication(where: MedicationWhereUniqueInput!): Medication
  deleteMedications(where: [MedicationWhereUniqueInput!]!): [Medication]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(
    where: NotificationWhereUniqueInput!
    data: NotificationUpdateInput!
  ): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  activities(
    where: ActivityWhereInput! = {}
    orderBy: [ActivityOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: ActivityWhereUniqueInput
  ): [Activity!]
  activity(where: ActivityWhereUniqueInput!): Activity
  activitiesCount(where: ActivityWhereInput! = {}): Int
  goals(
    where: GoalWhereInput! = {}
    orderBy: [GoalOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: GoalWhereUniqueInput
  ): [Goal!]
  goal(where: GoalWhereUniqueInput!): Goal
  goalsCount(where: GoalWhereInput! = {}): Int
  medications(
    where: MedicationWhereInput! = {}
    orderBy: [MedicationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: MedicationWhereUniqueInput
  ): [Medication!]
  medication(where: MedicationWhereUniqueInput!): Medication
  medicationsCount(where: MedicationWhereInput! = {}): Int
  notifications(
    where: NotificationWhereInput! = {}
    orderBy: [NotificationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: NotificationWhereUniqueInput
  ): [Notification!]
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationsCount(where: NotificationWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
    cursor: UserWhereUniqueInput
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
