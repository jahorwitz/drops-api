// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model Activity {
  id            String    @id @default(uuid())
  name          String    @default("")
  amount        Int?      @default(0)
  unitOfMeasure String    @default("")
  startTime     DateTime  @default(now()) @updatedAt @map("my_start_timestamp")
  endTime       DateTime? @default(now()) @updatedAt @map("my_end_timestamp")
  user          User?     @relation("Activity_user", fields: [userId], references: [id])
  userId        String?   @map("userid")

  @@index([userId])
}

model DietLog {
  id              String    @id @default(uuid())
  mealName        String    @default("")
  mealDescription String    @default("")
  logTime         DateTime  @default(now())
  calories        Int
  protein         Int?
  carbs           Int?
  fiber           Int?
  sugar           Int?
  createdAt       DateTime? @default(now())
  user            User?     @relation("DietLog_user", fields: [userId], references: [id])
  userId          String?   @map("user")

  @@index([userId])
}

model Goal {
  id            String       @id @default(uuid())
  type          GoalTypeType @map("my_select")
  name          String       @default("")
  amount        Int
  unitOfMeasure String       @default("")
  daysOfWeek    Json         @default("[]") @map("my_multiselect")
  user          User?        @relation("Goal_user", fields: [userId], references: [id])
  userId        String?      @map("user")

  @@index([type])
  @@index([userId])
}

model Medication {
  id            String  @id @default(uuid())
  name          String  @default("")
  amount        Int
  unitOfMeasure String  @default("")
  time          String  @default("")
  user          User?   @relation("Medication_user", fields: [userId], references: [id])
  userId        String? @map("user")

  @@index([userId])
}

model Notification {
  id               String               @id @default(uuid())
  type             NotificationTypeType @map("my_select")
  description      String               @default("")
  notificationTime DateTime             @default(now())
  createdAt        DateTime?            @default(now())
  status           String?              @default("new")
  archivedAt       DateTime?            @default(now())
  user             User?                @relation("Notification_user", fields: [userId], references: [id])
  userId           String?              @map("user")

  @@index([type])
  @@index([userId])
}

model Reminder {
  id        String    @id @default(uuid())
  label     String    @default("")
  type      String    @default("meal")
  time      String    @default("")
  createdAt DateTime? @default(now())
  user      User?     @relation("Reminder_user", fields: [userId], references: [id])
  userId    String?   @map("user")

  @@index([userId])
}

model User {
  id                     String         @id @default(uuid())
  name                   String         @default("")
  reminders              Reminder[]     @relation("Reminder_user")
  email                  String         @unique @default("")
  password               String
  createdAt              DateTime?      @default(now())
  lastLoginDate          DateTime?      @default(now())
  dateOfBirth            DateTime?
  weight                 Int?
  height                 Int?
  sex                    String?
  diabetesType           Json           @default("[]")
  isRegistrationComplete Boolean        @default(false)
  isOnboardingComplete   Boolean        @default(false)
  goals                  Goal[]         @relation("Goal_user")
  notifications          Notification[] @relation("Notification_user")
  activities             Activity[]     @relation("Activity_user")
  medications            Medication[]   @relation("Medication_user")
  dietLogs               DietLog[]      @relation("DietLog_user")
}

enum GoalTypeType {
  Exercise
  Diet
}

enum NotificationTypeType {
  Activity
  Diet
  Glucose
  Medicaton
  other
}
